//------------------------------------------------------------------------------
#include "dev_so.h"

//------------------------------------------------------------------------------
//版本信息
#define DEV_PHY_TEST_VER "dev_phy_test_v1.0"
#define DEFAULT_PACKET_NUM 3000
#define DEFAULT_PACKET_LEN  10

//------------------------------------------------------------------------------
//网口定义
#define PORT_MAX_NUM 4
#define LAN1 "LAN1"
#define LAN2 "LAN2"
#define LAN3 "LAN3"
#define LAN4 "LAN4"
//单独一套方案测试
#define DOWNPORT "DOWNPORT"

#define PHY_FUNC(flag) (flag?("phy"):("phybox"))

#define LAN1_RES(flag) (flag?("phy_test_lan1_res"):("phybox_test_lan1_res"))
#define LAN1_REA(flag) (flag?("phy_test_lan1_fail_reason"):("phybox_test_lan1_fail_reason"))

#define LAN2_RES(flag) (flag?("phy_test_lan2_res"):("phybox_test_lan2_res"))
#define LAN2_REA(flag) (flag?("phy_test_lan2_fail_reason"):("phybox_test_lan2_fail_reason"))

#define LAN3_RES(flag) (flag?("phy_test_lan3_res"):("phybox_test_lan3_res"))
#define LAN3_REA(flag) (flag?("phy_test_lan3_fail_reason"):("phybox_test_lan3_fail_reason"))

#define LAN4_RES(flag) (flag?("phy_test_lan4_res"):("phybox_test_lan4_res"))
#define LAN4_REA(flag) (flag?("phy_test_lan4_fail_reason"):("phybox_test_lan4_fail_reason"))

#define DOWNPORT_RES(flag) (flag?("phy_test_downport_res"):("phybox_test_downport_res"))
#define DOWNPORT_REA(flag) (flag?("phy_test_downport_fail_reason"):("phybox_test_downport_fail_reason"))



//#define WAN "WAN"
//------------------------------------------------------------------------------
COMMON_ERROR_ENUM phy_test(DEV_TEST_INFO_T *pstDevTestInfo)    //网口测试
{
    if(NULL == pstDevTestInfo)
    {
		return CommonError_NullPointer;
    }

	pstDevTestInfo->iPhyFlag= 1;
	
    switch(pstDevTestInfo->iPhyFlag)
    {
    		//0:phybox_test   1:phy_test
		case 0:
			debug_msg("[%s][%d][Show Error] phybox_test with PhyFlag : %d\n", __func__, __LINE__,pstDevTestInfo->iPhyFlag);
			break;
		case 1:
			debug_msg("[%s][%d][Show Error] phy_test with PhyFlag : %d\n", __func__, __LINE__,pstDevTestInfo->iPhyFlag);
			break;
		default:
			pstDevTestInfo->iPhyFlag = 1;
			debug_msg("[%s][%d][Show Error] phy_test with default_PhyFlag : %d\n", __func__, __LINE__,pstDevTestInfo->iPhyFlag);
			break;
    }
	
    COMMON_ERROR_ENUM enComRet;
    int iLoop = 0;
	char *apcPhyNvramVar[PORT_MAX_NUM*2] = {0};
	char *apcPortName[PORT_MAX_NUM] = {0};
	char *apcNvramVar[PORT_MAX_NUM*2] = {
								LAN1_RES(pstDevTestInfo->iPhyFlag),LAN1_REA(pstDevTestInfo->iPhyFlag),
								LAN2_RES(pstDevTestInfo->iPhyFlag),LAN2_REA(pstDevTestInfo->iPhyFlag),
								LAN3_RES(pstDevTestInfo->iPhyFlag),LAN3_REA(pstDevTestInfo->iPhyFlag),
								LAN4_RES(pstDevTestInfo->iPhyFlag),LAN4_REA(pstDevTestInfo->iPhyFlag)
						   };
	FILE *fp = NULL;
	memset(apcPhyNvramVar, 0 ,sizeof(apcPhyNvramVar));
	memcpy(apcPhyNvramVar, apcNvramVar, sizeof(apcNvramVar));
	
	char *apcPort[4] = {LAN1, LAN2, LAN3, LAN4};
	memset(apcPortName, 0, sizeof(apcPortName));
	memcpy(apcPortName, apcPort, sizeof(apcPort));
	    
    char acCmd[64] = "";
    char acBuf[128] = {0};

	/*清空对应的网口测试字段*/
	NvramGet("BOOT_BOMCODE", acCmd, 0);
	if(0 == strcmp(acCmd, "DA"))// 有下联网口的boot类型
	{
	    system("ssdk_sh debug reg set 0x684 0x300375 4");
	    system("ssdk_sh debug reg set 0x690 0x30036d 4");
	    sleep(3);
        enComRet = NvramUnset(DOWNPORT_RES(pstDevTestInfo->iPhyFlag),NVRAM_NO_COMMIT);
		if (CommonError_OK != enComRet)
		{
			debug_msg("[%s][%d][Show Error] unset nvram variable of phy_test failed!", __func__, __LINE__);
			return enComRet;
		}
		enComRet = NvramUnset(DOWNPORT_REA(pstDevTestInfo->iPhyFlag),NVRAM_NO_COMMIT);
		if (CommonError_OK != enComRet)
		{
			debug_msg("[%s][%d][Show Error] unset nvram variable of phy_test failed!", __func__, __LINE__);
			return enComRet;
		}
		fp = popen("ping 172.168.1.100 -c 2 |grep \"from 172.168.1.100:\"","r");
    	if (fp == NULL)
    	{
    		return CommonError_SysCallError;
    	}
    	fgets(acBuf, 128, fp);
		printf("fgets: %s",acBuf);
		if (NULL != strstr(acBuf, "seq="))
        {
        	enComRet = NvramSet(DOWNPORT_RES(pstDevTestInfo->iPhyFlag), "pass", NVRAM_NO_COMMIT);
			if(CommonError_OK != enComRet)
			{
				return enComRet;
	 		}
        }
        else
        {
            enComRet = NvramSet(DOWNPORT_RES(pstDevTestInfo->iPhyFlag), "fail", NVRAM_NO_COMMIT);
			if(CommonError_OK != enComRet)
			{
				return enComRet;
	 		}
	 		enComRet = NvramSet(DOWNPORT_REA(pstDevTestInfo->iPhyFlag), "no_ping", NVRAM_NO_COMMIT);
			if(CommonError_OK != enComRet)
			{
				return enComRet;
	 		}
        }
	    pclose(fp);
	}
    for(iLoop = 0; iLoop < PORT_MAX_NUM*2; iLoop++)
    {
		enComRet = NvramUnset(apcPhyNvramVar[iLoop],NVRAM_NO_COMMIT);
		if (CommonError_OK != enComRet)
		{
			debug_msg("[%s][%d][Show Error] unset nvram variable of phy_test failed!", __func__, __LINE__);
			return enComRet;
		}
    }
	
	//SystemCall(NVRAM_CMD_PREFIX" commit");
	
    if (0 >= pstDevTestInfo->iPacketNum)
    {
		pstDevTestInfo->iPacketNum = DEFAULT_PACKET_NUM;
    }
    if (0 >= pstDevTestInfo->iPacketLen)
    {
		pstDevTestInfo->iPacketLen = DEFAULT_PACKET_LEN;
    }
	
//    debug_msg("[%s][%d][Show Info] PacketNum: %d, PacketLen:%d", __func__, __LINE__, pstDevTestInfo->iPacketNum, pstDevTestInfo->iPacketLen);
#if 0
	for(iLoop=0; iLoop < PORT_MAX_NUM; iLoop++)
    {
		memset(acCmd, 0, sizeof(acCmd));
		debug_msg("[%s][%d][Show Info] PortName: %s", __func__, __LINE__, apcPortName[iLoop]);
		sprintf(acCmd, "%s looptest %s %d %d", PHY_FUNC(pstDevTestInfo->iPhyFlag), apcPortName[iLoop], pstDevTestInfo->iPacketNum, pstDevTestInfo->iPacketLen);
		debug_msg("[%s][%d][Show Info] Cmd1: %s", __func__, __LINE__, acCmd);
		enComRet = SystemCall(acCmd);
		if(CommonError_OK != enComRet)
		{
			return enComRet;
		}
		memset(acCmd, 0, sizeof(acCmd));
		sprintf(acCmd, "%s loopstate %s", PHY_FUNC(pstDevTestInfo->iPhyFlag), apcPortName[iLoop]);
		debug_msg("[%s][%d][Show Info] Cmd2: %s", __func__, __LINE__, acCmd);
		enComRet = SystemCall(acCmd);
		if( CommonError_OK != enComRet )
		{
			return enComRet;
		}
		
    }
#else
    memset(acCmd, 0, sizeof(acCmd));
    sprintf(acCmd, "%s looptest", PHY_FUNC(pstDevTestInfo->iPhyFlag));
    enComRet = SystemCall(acCmd);
    if(CommonError_OK != enComRet)
    {
        return enComRet;
    }

#endif

	
    return CommonError_OK;
}

